wb = xlsx_package.workbook

# Define styles
header_style = wb.styles.add_style(
  b: true, 
  alignment: { horizontal: :center, vertical: :center },
  bg_color: 'D3D3D3' # Light Gray background
)

# Use the transactions already filtered by date from the controller
date_filtered_transactions = @transactions

# Get all claim_ids in the date range
date_filtered_claim_ids = date_filtered_transactions.pluck(:claim_id).uniq

# Preload related data based on these claim_ids
doctorlist_mapping = Doctorlist.where(activity_clinician: date_filtered_transactions.pluck(:activity_clinician).uniq)
                             .index_by(&:activity_clinician)

user_mapping = User.where(id: doctorlist_mapping.values.map(&:userable_id)).index_by(&:id)

denialcode_mapping = Denialcodelist.where(denial_code: date_filtered_transactions.pluck(:denial_code).uniq)
                                 .index_by(&:denial_code)

# Load ALL remittance data for these claim_ids (not just date filtered)
remittance_data = TransactionData.where(claim_id: date_filtered_claim_ids, data_type: 'Remittance.Advice').index_by(&:claim_id)

# Load ALL submission data for these claim_ids (not just date filtered)
submission_data = TransactionData.where(claim_id: date_filtered_claim_ids, data_type: 'Claim.Submission').index_by(&:claim_id)

has_submission_rows = []
no_submission_rows = []
no_remittance_rows = []

# Add worksheet
wb.add_worksheet(name: "Transactions") do |sheet|
  sheet.add_row [
    "Sender ID", "Receiver ID", "Receiver", "Claim ID", "Transaction Date",
    "Activity Clinician", "Doctor Name", "Activity ID", "Activity Code",
    "Activity Start Date", "Activity Quantity", "Activity Net",
    "Activity Payment Amount","Received Amount", "Claim Date Settlement",
    "Claim Payment Reference", "Denial Code", "Denial code Description", "RA Comments", "Data Type", "Compare Data"
  ], style: header_style

  # Only process transactions in the date range
  date_filtered_transactions.find_in_batches(batch_size: 5000) do |batch|
    batch.each do |transaction|
      doctorlist = doctorlist_mapping[transaction.activity_clinician]
      user = user_mapping[doctorlist&.userable_id]
      doctor_name = user.present? ? "#{user.first_name} #{user.last_name}" : ""
      denial_description = denialcode_mapping[transaction.denial_code]&.description || ""

      # Compare against ALL related transactions (not date filtered)
      compare_data = "N/A"
      if transaction.data_type == "Claim.Submission"
        compare_data = remittance_data[transaction.claim_id].nil? ? "no remittance" : "has a remittance"
      elsif transaction.data_type == "Remittance.Advice"
        compare_data = submission_data[transaction.claim_id].nil? ? "no submission" : "has a submission"
      end

      next if compare_data == "has a remittance"

      row_data = [
        transaction.sender_id, 
        transaction.receiver_id,            
        transaction.provider_id,             
        transaction.claim_id,            
        transaction.transaction_date.strftime('%Y-%m-%d %H:%M:%S'), 
        transaction.activity_clinician,       
        doctor_name,                           
        transaction.activity_id,              
        transaction.activity_code,             
        transaction.activity_start.strftime('%Y-%m-%d %H:%M:%S'),  
        transaction.activity_quantity,        
        transaction.activity_net,             
        transaction.activity_payment_amount,
        transaction.received_payment.present? ? transaction.received_payment : transaction.activity_payment_amount,
        transaction.date_settlement.present? ? transaction.date_settlement.strftime('%Y-%m-%d %H:%M:%S') : nil,
        transaction.payment_reference,
        transaction.denial_code, 
        denial_description,
        transaction.comments,
        transaction.data_type,
        compare_data
      ]

      case compare_data
      when "has a submission"
        has_submission_rows << row_data
      when "no submission"
        no_submission_rows << row_data
      when "no remittance"
        no_remittance_rows << row_data
      end
    end
  end

  has_submission_rows.each { |row| sheet.add_row(row) }
  no_submission_rows.each { |row| sheet.add_row(row) }
  no_remittance_rows.each { |row| sheet.add_row(row) }
end