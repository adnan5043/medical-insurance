wb = xlsx_package.workbook

# Define styles
header_style = wb.styles.add_style(
  b: true, 
  alignment: { horizontal: :center, vertical: :center },
  bg_color: 'D3D3D3' # Light Gray background
)

# Preload Doctorlist and Denialcodelist records to avoid N+1 queries
doctorlist_mapping = Doctorlist.where(activity_clinician: @transactions.pluck(:activity_clinician).uniq)
                               .index_by(&:activity_clinician)

denialcode_mapping = Denialcodelist.where(denial_code: @transactions.pluck(:denial_code).uniq)
                                   .index_by(&:denial_code)

# Fetch remittance data (example: matching by claim_id)
remittance_data = TransactionData.where(claim_id: @transactions.pluck(:claim_id), data_type: 'Remittance.Advice').index_by(&:claim_id)

# Pre-fetch transactions for submission data for faster lookups
submission_data = @transactions.where(data_type: 'Claim.Submission').index_by(&:claim_id)

has_submission_rows = []
no_submission_rows = []
no_remittance_rows = []

# Add worksheet
wb.add_worksheet(name: "Transactions") do |sheet|
  # Add header row with bold style, including a "Remittance Data" column
  sheet.add_row [
    "Sender ID", "Receiver ID", "Receiver", "Claim ID", "Transaction Date",
    "Activity Clinician", "Doctor Name", "Activity ID", "Activity Code",
    "Activity Start Date", "Activity Quantity", "Activity Net",
    "Activity Payment Amount","Received Amount", "Claim Date Settlement",
    "Claim Payment Reference", "Denial Code", "Denial code Description", "RA Comments", "Data Type", "Compare Data"
  ], style: header_style

  # Iterate over transactions in batches to avoid memory overload
  @transactions.find_in_batches(batch_size: 5000) do |batch|
    batch.each do |transaction|
      # Use preloaded doctorlist mapping
      doctor_name = doctorlist_mapping[transaction.activity_clinician]&.doctor_name || ""

      # Lookup denial description from the Denialcodelist mapping
      denial_description = denialcode_mapping[transaction.denial_code]&.description || ""

      # Find remittance data based on claim_id
      remittance = remittance_data[transaction.claim_id]

      # Compare data logic (optimized)
      compare_data = "N/A"
      if transaction.data_type == "Claim.Submission"
        # Directly check for corresponding remittance in preloaded remittance_data
        compare_data = remittance.nil? ? "no remittance" : "has a remittance"
      elsif transaction.data_type == "Remittance.Advice"
        # Directly check for corresponding submission in preloaded submission_data
        corresponding_submission = submission_data[transaction.claim_id]
        compare_data = corresponding_submission.nil? ? "no submission" : "has a submission"
      end

      next if compare_data == "has a remittance"

      # Prepare the row data
      row_data = [
        transaction.sender_id, 
        transaction.receiver_id,            
        transaction.provider_id,             
        transaction.claim_id,            
        transaction.transaction_date.strftime('%Y-%m-%d %H:%M:%S'), 
        transaction.activity_clinician,       
        doctor_name,                           
        transaction.activity_id,              
        transaction.activity_code,             
        transaction.activity_start.strftime('%Y-%m-%d %H:%M:%S'),  
        transaction.activity_quantity,        
        transaction.activity_net,             
        transaction.activity_payment_amount,
        transaction.received_payment,  
        transaction.date_settlement.present? ? transaction.date_settlement.strftime('%Y-%m-%d %H:%M:%S') : nil,
        transaction.payment_reference,
        transaction.denial_code, 
        denial_description,
        transaction.comments,
        transaction.data_type,
        compare_data
      ]

      # Add the row to the appropriate array based on compare_data
      case compare_data
      when "has a submission"
        has_submission_rows << row_data
      when "no submission"
        no_submission_rows << row_data
      when "no remittance"
        no_remittance_rows << row_data
      end
    end
  end

  # Now add the rows in the desired order
  has_submission_rows.each { |row| sheet.add_row(row) }
  no_submission_rows.each { |row| sheet.add_row(row) }
  no_remittance_rows.each { |row| sheet.add_row(row) }
end
